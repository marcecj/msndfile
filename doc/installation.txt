Installing msndfile from source
-------------------------------

There are two ways to compile msndfile.  The easy way is to call the m-file
`compile_msndfile.m` from MATLAB.  This is probably the way to go if you only
want to 'use' msndfile, but none of the binary downloads satisfy your needs.
There is also a more flexible build system based on SCons available, that can
also generate a Visual Studio IDE project file and can be integrated into
other IDEs like Eclipse.  You will most likely want to use this if you want to
'work on' msndfile.  For details on both methods, see their corresponding
subsections.

Prerequisites
~~~~~~~~~~~~~

:libsndfile1: http://www.mega-nerd.com/libsndfile
:mtest: http://www.mathworks.com/matlabcentral/fileexchange/22846[MTest]
:pywin32: http://starship.python.net/crew/mhammond/win32/[Python Win32 extensions]
:ideintegration: http://www.scons.org/wiki/IDEIntegration
:gnumex: http://gnumex.sourceforge.net[gnumex]

The basic dependencies of msndfile are:

- MATLAB (tested with 2010a Student Edition)
- {libsndfile}
- a C compiler that supports C11 (e.g., GCC, clang)
- {mtest} (needed only for the test suite)

The requirement for a compiler that supports C11 means that the Microsoft
Visual Compiler cannot be supported anymore.  However, you can still generate
Visual Studio projects with the SCons based build system; they will simply use
another compiler footnote:[I do not know if debugging in VS is possible this
way; it might be with the appropriate add-ins, e.g., VisualGDB.].

To obtain libsndfile, you may try the following steps:

Linux::
    Install the libsndfile development package via your distributions package
    manager (typically a package with a '-devel' or '-dev' suffix).
Windows::
    Follow the instructions at {libsndfile1}).  After you have done that, copy
    the files `libsndfile-1.dll`, `libsndfile-1.lib` and `sndfile.h` into the
    `Win` subdirectory.
Mac OS X::
    Either download the sources from {libsndfile1} and compile them yourself
    or use a package management system like fink or macports or whatever
    system you already use.

If you are going to use the SCons based build system, you will also need

- http://www.python.org[Python] (whatever version SCons works with, though at
  least 2.5 is required)
- {scons} (tested with SCons 2.3.x)
- {pywin32} (optional, but necessary for some SCons features on Windows)
- the https://github.com/marcecj/scons_matlab[SCons Matlab Tool]

The MATLAB Tool is a submodule of this repository.  To install it, just run

-----------------------------
$ git submodule update --init
-----------------------------

Finally, if you want to build the documentation, you need these additional
dependencies:

- {asciidoc} (and 'its' dependencies, which can be vast, depending on the
  output format -- it is probably easiest to do this on a Linux system)
- the https://github.com/marcecj/scons_asciidoc[SCons AsciiDoc Tool]

The SCons Tool is, again, a submodule of this repository and will be installed
by running the above git command.

Using the `compile_msndfile.m` script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In MATLAB, type `compile_msndfile` to compile all Mex extensions.  By default
this will put the binaries in the `+msndfile` subdirectory (a Matlab package
directory).  See the built-in help (`help compile_msndfile`) for overriding
the defaults to your needs.

[NOTE]
==========================
If `mex -setup` does not find a C11 compatible compiler, you will have
to configure mex manually.  The options I know of are:

- either create your own `mexopts.bat`/`mexopts.sh` file, or
- use MinGW/Cygwin with {gnumex}.
==========================

Using the SCons based build system
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The SCons based build system is in general more robust and flexibel than calling
Mex in `compile_msndfile.m`.  It uses an extension that properly presets some
environment variables, though it slows compilation down the first time it is run
because it starts a MATLAB subprocess to obtain them.

Anyway, to use SCons, call it from the command line like so:

--------------------------------------
$ scons [--interactive] [options] [target]
--------------------------------------

As to why I wrote a complicated SCons footnote:[A CMake based build system was
also attempted, but CMake proved difficult to extend, at least in comparison
with SCons.] build system in the first place, well...  Apart from the usual
features of real build systems (proper dependency tracking, parallel builds,
platform dependent configuration Ã  la autoconf, etc.) it can do the following
things:

- create a Visual Studio solution file with Release and Debug Variants
- create a ZIP file for distribution
- separates release from debug builds
- *could* support cross-compiling to other architectures/operating systems to
  provide binaries for them
- builds the {asciidoc} documentation you are currently reading
- supports whatever compilers SCons (or third party extensions) supports, and
  not just what The Mathworks supports, which is incomplete and quite outdated
  anyway footnote:[Fun fact: the most recent minor version of GCC officially
  supported by The Mathworks for MATLAB 2012a (GCC 4.4) is not even supported by
  the _compiler vendor_ anymore, though I suppose this may be deliberate.].

For more information (such as available build targets, options and overridable
environment variables), see the output of `scons --help`.

If you need to work on the code and plan to compile often, you can speed up the
process in general by using the interactive mode by passing the `--interactive`
option to SCons.

NOTE: To debug from within an IDE, you need to be sure to call MATLAB with the
`-wait` argument.

Linux
^^^^^

Just open a terminal, navigate to the top-level project directory, and type

-----------------
$ scons
-----------------

Windows
^^^^^^^

You can launch the batch file `start_scons.bat`, which launches scons and keeps
the terminal window open.  It is expected that SCons is in your `$PATH`.

Under Windows, the build system has an additional `vsproj` target.  This creates
an MS Visual Studio Solution file with msndfile as a project.  For other IDEs,
see {ideintegration}.

Mac OS X
^^^^^^^^

Follow the same steps as under Linux, or look into integrating SCons into your
IDE of choice (see {ideintegration}).

[[testsuite]]
Testing
~~~~~~~

Msndfile comes with a comprehensive test suite (based on {mtest}) that is run
by executing `test_msndfile.m` from MATLAB.  There are also performance
evaluation scripts, however they take several minutes and so are not run by
default.  To run them, too, set `do_perf_tests` to `true` in
`test_msndfile.m`.

NOTE: If you use SCons, you must run the `install` target first and make sure DESTDIR
is in MATLABs path.

NOTE: To run the bext chunk test you need the file `EBU_sample.wav` , which I
found http://www.interlab.fr/docs/aaton/docs/indaw/BWF_aaton_samples/[here].
Put it in the `test_files/bwf/` subdirectory.

// vim:ft=asciidoc
