Installing msndfile
===================

There are 2 ways to compile msndfile.  The easy way is to call the m-file
'compile_msndfile.m' from Matlab.  There is also a more flexible build system
based on SCons available, though it is perhaps overblown for a project of this
size.  It has, however, proven that a proper and robust cross-platform build
system for Mex extensions is possible.  For details to both methods, see their
relevant subsections.

A problem of all methods of compilation is that at least two things are not
implemented.  For one thing: installing.  It is expected that you copy the
resulting Mex binaries to wherever your Matlab installation looks for them.

Prerequisites
-------------

Linux
~~~~~

You need to have the libsndfile development package installed (typically a
package with a '-devel' suffix).  On systems like Gentoo, where runtime and
development components are not separated, simply install the libsndfile package.

Windows
~~~~~~~

You don't need anything.  All needed libraries and Headers (except those
belonging to Matlab) are bundled.

Mac OS X
~~~~~~~~

You need to install libsndfile.  To do so, follow the instructions at
http://www.mega-nerd.com/libsndfile[]).  If there is no binary available for your
version of OS X, use a package management system like fink or (better, in the
opinion of the author) macports.

Using the compile_msndfile.m script (all platforms)
---------------------------------------------------

In Matlab, type `compile_msndfile`.  This will compile both Mex extensions
and run a test script.

Using the SCons based build system
----------------------------------

The SCons based build system is in general more robust and flexibel than the
calling Mex in compile_msndfile.m.  It comes with an extension that properly
presets a few environment variables, though it slows compilation down the first
time it is run because it starts a Matlab subprocess to obtain them.  If you
need to work on the Code and plan to compile often, you can speed up the process
in general by using the interactive mode by passing the `--interactive` option
to SCons.  You can also override certain environment variables (see the `scons
--help`).

In summary, the command line would look like this:

--------------------------------------
scons [--interactive] [options] [target]
--------------------------------------

Linux
~~~~~

Just open a terminal and type

-----------------
    $ scons
-----------------

while in the source directory.  Users with 32 bit Matlab on 64 bit systems
should pass the --linux32 option to enforce 32 bit compilation.

Windows
~~~~~~~

If SCons is in your PATH, you can open a console and follow the steps under
Linux.  The `vsproj` target creates a MS Visual Studio Solution file with
msndfile as a project.  For other IDEs, see
http://www.scons.org/wiki/IDEIntegration[].

Mac OS X
~~~~~~~~

Follow the same steps as under Linux, or look into integrating SCons into your
IDE of choice (see http://www.scons.org/wiki/IDEIntegration[]).
